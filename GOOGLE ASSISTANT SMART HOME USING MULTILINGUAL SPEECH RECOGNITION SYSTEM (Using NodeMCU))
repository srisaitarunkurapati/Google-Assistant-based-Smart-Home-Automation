#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

#include <ESP8266WiFi.h>

#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

// Set the LCD address to 0x27 for a 16 chars and 2 line display
LiquidCrystal_I2C lcd(0x27, 16, 2);

#define Relay3            D3
#define Relay1            D4
#define Relay2            D5
#define WIFI_SSID       "ENTER YOUR WIFI NAME"             // Your SSID
#define WIFI_PASS       "ENTER YOUR WIFI PASSWORD"        // Your password

/************************* Adafruit.io Setup *********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "iotgha13"            // Replace it with your username
#define AIO_KEY         "aio_mXli03LMJJxgjF1ziiiWlQJviYzC"   // Replace with your Project Auth Key

/************ Global State (you don't need to change this!) ******************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/


// Setup a feed called 'onoff' for subscribing to changes.
Adafruit_MQTT_Subscribe Light1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/light"); // FeedName
Adafruit_MQTT_Subscribe Fan1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/fan"); // FeedName
Adafruit_MQTT_Subscribe Sound1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME"/feeds/sound"); // FeedName

void MQTT_connect();

void setup() {
  Serial.begin(115200);
  
  lcd.init();                      // initialize the lcd 
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Google Assistant");
  lcd.setCursor(0,1);
  lcd.print(" Home Automation");
  delay(1000);
  
  pinMode(Relay1, OUTPUT);
  pinMode(Relay2, OUTPUT);
  pinMode(Relay3, OUTPUT);
  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WIFI_SSID);
  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print(" Connecting to ");
  lcd.setCursor(6,1);
  lcd.print(WIFI_SSID);
  delay(500);
  

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  
  Serial.println("WiFi connected");
  Serial.println("IP address: "); 
  Serial.println(WiFi.localIP());
  
   lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("WIFI Connected");
  delay(500);
 
  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&Light1);
  mqtt.subscribe(&Fan1);
  mqtt.subscribe(&Sound1);
  
}

void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    ESP.restart();
    mqtt.disconnect();
    delay(5000);  // wait 5 seconds
    retries--;
    if (retries == 0) {
      // basically die and wait for WDT to reset me
      while (1);
    }
  }
  Serial.println("MQTT Connected!");
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("   Connected to");
  lcd.setCursor(0,1);
  lcd.print("    Adafruit");
  delay(500);
  lcd.clear();
  
}

void loop() {
 
  MQTT_connect();

  lcd.setCursor(0,0);
  lcd.print("   Waiting For");
  lcd.setCursor(0,1);
  lcd.print("   the Command");
  
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) 
  {
    if (subscription == &Light1) 
    {
      Serial.print(F("Got: "));
      Serial.println((char *)Light1.lastread);
      int Light1_State = atoi((char *)Light1.lastread);
      digitalWrite(Relay1, !(Light1_State));
      Serial.print("Light State = ");
      Serial.println(Light1_State);
      if (Light1_State == 1)
      {
        Serial.println("Entered light state");
        digitalWrite(Relay1, !(Light1_State));
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("  Switching ON");
        lcd.setCursor(0,1);
        lcd.print("  the Light");
        delay(1000);
        lcd.clear();
      }
      else if (Light1_State == 0)
      {
        Serial.println("Entered light state But Not on");
        digitalWrite(Relay1, !(Light1_State)); 
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("  Switching off");
        lcd.setCursor(0,1);
        lcd.print("   the Light  ");
        delay(1000);
        lcd.clear();
      }
     }
     if (subscription == &Fan1) 
      {
        Serial.print(F("Got: "));
        Serial.println((char *)Fan1.lastread);
        int Fan1_State = atoi((char *)Fan1.lastread);
        digitalWrite(Relay2, !(Fan1_State));
        if (Fan1_State == 1)
        {
          Serial.println("Entered Fan state");
          digitalWrite(Relay2, !(Fan1_State));
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("  Switching On");
          lcd.setCursor(0,1);
          lcd.print("  the Fan");
          delay(1000);
          lcd.clear();
        }
        else if (Fan1_State == 0)
        {
          Serial.println("Entered Fan state But Not on");
          digitalWrite(Relay2, !(Fan1_State)); 
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("  Switching OFF");
          lcd.setCursor(0,1);
          lcd.print("  the Fan");
          delay(1000);
          lcd.clear();
        }
      }
      if (subscription == &Sound1) 
      {
        Serial.print(F("Got: "));
        Serial.println((char *)Sound1.lastread);
        int Sound1_State = atoi((char *)Sound1.lastread);
        digitalWrite(Relay3, !(Sound1_State));
        if (Sound1_State == 1)
        {
          Serial.println("Entered Sound state");
          digitalWrite(Relay3, !(Sound1_State));
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("  Switching ON");
          lcd.setCursor(0,1);
          lcd.print("  the Fan");
          delay(1000);
          lcd.clear();
        }
        else if (Sound1_State == 0)
        {
          Serial.println("Entered Fan state But Not on");
          digitalWrite(Relay3, !(Sound1_State)); 
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("  Switching OFF");
          lcd.setCursor(0,1);
          lcd.print("  the Fan");
          delay(1000);
          lcd.clear();
        }
      }
  }
}
